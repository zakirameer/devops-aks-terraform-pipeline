trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

# Define Variables
variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa

stages:
  - stage: terraformValidate
    jobs:
      - job: terraformValidate
        continueOnError: true
        steps:
         - task: PublishPipelineArtifact@1
           inputs:
             targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
             artifact: 'published-artifacts'
             publishLocation: 'pipeline'
        
         - task: TerraformInstaller@0
           inputs:
             terraformVersion: 'latest'
         - task: TerraformCLI@0
           inputs:
             command: 'init'
             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
             backendType: 'azurerm'
             backendServiceArm: 'azuredevops-azureRM-svc'
             backendAzureRmResourceGroupName: 'aks-rg-sa'
             backendAzureRmStorageAccountName: 'terraformstatefileaccoun'
             backendAzureRmContainerName: 'tfstate'
             backendAzureRmKey: 'aks-test.tfstate'
             allowTelemetryCollection: false
         - task: TerraformCLI@0
           inputs:
             command: 'validate'
             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
             allowTelemetryCollection: false
  - stage: DeployAKSClusters
    jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              name: sshkey
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformCLI@0
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
                backendType: 'azurerm'
                backendServiceArm: 'azuredevops-azureRM-svc'
                backendAzureRmResourceGroupName: 'aks-rg-sa'
                backendAzureRmStorageAccountName: 'terraformstatefileaccoun'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
                environmentServiceName: 'azuredevops-azureRM-svc'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -out $(Pipeline.Workspace)/published-artifacts/$(DEV_ENVIRONMENT)-$(Build.BuildId).out -var environment=$(DEV_ENVIRONMENT)'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
                environmentServiceName: 'azuredevops-azureRM-svc'
                commandOptions: '$(Pipeline.Workspace)/published-artifacts/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            